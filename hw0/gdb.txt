3.3

1. What is the value of arg? 
0x7fffffffe608

2. What is pointed to by argv? 
0x7fffffffe83d “/home/vagrant/code/personal/hw0/wc”

3. What is the address of the function main? 
0x4006dd

4. Try info stack. Explain what you see.
#0 main (argc = 2, args = 0x7fffffffe608) at wc.c:32
The first number is the stack, then it’s the function name (we are in the main function). Next we have the arguments to the function and the line number of execution. 

5. Try info frame. Explain what you see. 
	rip = 0x40079c in main (wc.c:42); saved rip = 0x7ffff7a36ec5
	source language c.
	Arglist at 0x7fffffffe520, args: args = 2, argv = 0x7fffffffe608
	Locals at 0x7fffffffe520, Previous frame’s sp is 0x7fffffffe530
	Saved registers:
    rbp at 0x7fffffffe520, rip at 0x7fffffffe528
We see the address of the frame, the address of the next frame down,  the address of the next frame up, the language in which the code is written, the address of the frame’s arguments, the address of the frame’s local variables, the program counter saved in it, and which registers were saved in the frame.

6. Try info registers. Which registers are holding aspects of the program that you recognize?
