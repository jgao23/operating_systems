Output:

_main  @ 0x4005c2
recur @ 0x40057d
_main stack: 0x7ffc152c68cc
static data: 0x601048
Heap: malloc 1: 0xdde010
Heap: malloc 2: 0xdde080
recur call 3: stack@ 0x7ffc152c689c
recur call 2: stack@ 0x7ffc152c686c
recur call 1: stack@ 0x7ffc152c683c
recur call 0: stack@ 0x7ffc152c680c


1. Use objdump with the -D flag on the map executable. Which of the addresses from the output of running ./map are defined in the executable, and which segment/section is each defined in?

_main  @ 0x4005c2 in the executable is found in the .text section
recur @ 0x40057d in the executable is found in the .text section
static data: 0x601048 in the executable is found in the .data section


2. Make a list of the important segments, and what they are used for (look up their names on the Internet if you don't know).

.text: Holds the 'text,' or executable instructions of a program.
.data: Holds initialized data that contribute to the program's memory image.
.dynsym: Holds the dynamic linking symbol table.
.dynstr: Holds dynamic linking information, most commonly the strings that represent the names associated with symbol table entries.
.init: Holds executable instructions that contribute to the process of initialization code; when a program starts to run, the system arranges to execute the code in this section before calling the main program entry point (main).
.fini: Holds executable instructions that contribute to the process termination code; when a program exits normally, the system arranges to execute the code in this section.
.rodata: Holds read-only data that typically contributes to a non-writable segment in the process image.
.eh_frame: Holds information necessory for frame unwinding during exception handling.
.dynamic: Holds dynamic linking information.
.interp: Holds the path name of a program interpreter.
.rodata: Holds read-only data that typically contribute to a non-writable segment in the process image.
.init_array: Holds an array of function pointers that contributes to a single initialization array for the executable or shared object containing the section.

3. What direction is the stack growing in?
The stack is growing down. 

4. How large is the stack frame for each recursive call?
The address increases by 0x30 every recursive call. 

5. Where is the heap? What direction is it growing in?
The heap starts 0x671010, and it grows up.

6. Are the two malloc()ed memory areas contiguous?
Yes, the two malloc()ed memory areas are contiguous.